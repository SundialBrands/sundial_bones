/******************************************************************
Site Name: SheaMoisture v1.5
Author: Chad A. Carino

Stylesheet: Mixins Stylesheet

******************************************************************/


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "-ms-", "-o-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}

/*********************
BOX SHADOW
*********************/

@mixin box-shadow($boxshadow) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "-moz-", "-ms-", "-o-", "" );
  @each $prefix in $prefixes {
    #{$prefix}box-shadow: $boxshadow;
  }
}


/*********************
GRADIENTS
*********************/

@mixin gradBG-H($start, $end) {
    background-color: 	$start;
    background-image: 	-webkit-gradient(linear, left top, right top, from($start), to($end));
    background-image: 	-webkit-linear-gradient(left, $start, $end);
    background-image:	-moz-linear-gradient(left, $start, $end);
    background-image:	-ms-linear-gradient(left, $start, $end);
    background-image:	-o-linear-gradient(left, $start, $end);
    background-image:	linear-gradient(left, $start, $end);
    filter:				progid:DXImageTransform.Microsoft.gradient(startStr='#{$start}', endStr='#{$end}', gradientType='1');
}

@mixin gradBG-V($start, $end) {
    background-color: $start;
    background-image:	-webkit-gradient(linear, left top, left bottom, from($start), to($end));
    background-image:	-webkit-linear-gradient(top, $start, $end);
    background-image:	-moz-linear-gradient(top, $start, $end);
    background-image:	-ms-linear-gradient(top, $start, $end);
    background-image:	-o-linear-gradient(top, $start, $end);
    background-image:	linear-gradient(top, $start, $end);
    filter:				progid:DXImageTransform.Microsoft.gradient(startStr='#{$start}', endStr='#{$end}');
}

/*********************
UNICODE FA CONTENT
*********************/

/*
@include facontent($fa-var-pause);
renders to:
	content: '\f04c';
*/

@mixin facontent($fa-var) {
	$pre: '"\\';
	$post: '"';
	content: #{$pre}#{$fa-var}#{$post};
}

/*********************
CALC
*********************/

/*
@include calc('height','100%','-','20px');
renders to:
	height: -webkit-calc(100% - 20px);
	height: -moz-calc(100% - 20px);
	height: -ms-calc(100% - 20px);
	height: -o-calc(100% - 20px);
	height: calc(100% - 20px);
*/

@mixin calc($property, $val1, $operator, $val2) {
	  $prefixes:      ("-webkit-", "-moz-", "-ms-", "-o-", "" );
	  @each $prefix in $prefixes {
		#{$property}: #{$prefix}calc(#{$val1} #{$operator} #{$val2});
	  }
}

/*********************
PLACEHOLDER
*********************/

/*
Placeholders need to be individual lines, therefore selector must be defined as well.
Use outside of desired selector.
USAGE: @include placeholder(input, italic 400 1em $sans-serif, $text-color);
OUTPUT: input::-webkit-input-placeholder {
			font: italic 400 1em sans-serif;
			color: #333333;
		}
		input::-webkit-input-placeholder {
			font: italic 400 1em sans-serif;
			color: #333333;
		}
*/

@mixin placeholder($selector, $font, $color) {
  $ph-prefixes: ("::-webkit-input-placeholder", ":-moz-placeholder", "::-moz-placeholder", ":-ms-input-placeholder", ":input-placeholder", ":placeholder");
	@each $prefix in $ph-prefixes {
		#{selector}#{$prefix} {
			font: $font;
			color: $color;
		}
	}
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

/*********************
RESET FLOATS
These allow you to float or unfloat elements.
Width is set by full width value, not just number.
Buttons/fields are usually contained in a floated element,
so those mixins apply float to container
and width/padding/align to element.

Example:
@include float(auto, right);
*********************/

@mixin unfloat($width) {
	float: none;
	width: $width;
}

@mixin float($width, $float: left) {
	float: $float;
	width: $width;
}

@mixin unfloatbtn($padding: 1em 0) {
	float: none;
	button, input.btn {
		
		
		text-align: center;
	}
}

@mixin floatbtn($float: left, $padding: 0.5em 1em 0) {
	float: $float;
	button, input.btn {
		width: auto;
		padding: $padding;
		text-align: initial;
	}
}

@mixin unfloatfield($padding: 1em 0) {
	label {
		float: none;
		width: auto;
		line-height: normal;
		text-align: left;
		display: block;
		margin: 0 0 0.5em;
	}
	input {
		padding: 10px;
	}
}

@mixin floatfield($float: left, $width: 200px, $padding: 0 1em 0) {
	label {
		float: $float;
		width: $width;
		line-height: 1.8em;
		text-align: right;
		display: initial;
		margin: 0 1em 0 0;
	}
	input {
		width: auto;
		padding: $padding;
		text-align: initial;
	}
}

/*********************
RETINA IMAGES
Quick way to include @2x and @3x versions of images.
Parts Copyright 2012, Joe Lambert.
http://www.joelambert.co.uk
Free to use under the MIT license.
http://joelambert.mit-license.org/
*********************/

@import "compass/css3/background-size";

@mixin bgimg-2x($image) {
	background-image: image-url($image);
	
	// If we have a retina image then add styles for it too
	@if file_exists(retina2_filename($image))
	{
		@include background-size(image-width($image) auto);
		background-image: image-url(retina2_filename($image));
	}
}

@mixin inline-bgimg-2x($image) {
	background-image: inline-image($image);
	
	// If we have a retina image then add styles for it too
	@if file_exists(retina2_filename($image))
	{
		@include background-size(image-width($image) auto);
		background-image: inline-image(retina2_filename($image));
	}
}

@mixin bgimg-3x($image) {
	background-image: image-url($image);
	
	// If we have a retina image then add styles for it too
	@if file_exists(retina3_filename($image))
	{
		@include background-size(image-width($image) auto);
		background-image: image-url(retina3_filename($image));
	}
}

@mixin inline-bgimg-3x($image) {
	background-image: inline-image($image);
	
	// If we have a retina image then add styles for it too
	@if file_exists(retina3_filename($image))
	{
		@include background-size(image-width($image) auto);
		background-image: inline-image(retina3_filename($image));
	}
}

